var serial;          // variable to hold an instance of the serialport library
var portSelector; // a select menu for the port list
var locH = 320;
var locV = 240;        // location of the circle
var newLocH = 0;
var newLocV = 0;       //temporary storage of the new location
var speedX = 0;        //speed of the circle
var speedY = 0;
var circleColor = 255; // color of the circle
let walls = [];    //the array of maze wall
var r = 25; 
let ballHitsWall = false; //the ball stops when hitting the wall
 
function setup() {
  createCanvas(640, 480);          // make canvas
  smooth();                        // antialias drawing lines
  walls[0] = new wall(50, 50, 5, 380);
  walls[1] = new wall(50, 50, 540, 5);
  serial = new p5.SerialPort();    // make a new instance of the serialport library
  serial.on('list', printList);    // set a callback function for the serialport list event
  serial.on('connected', serverConnected); // callback for connecting to the server
  serial.on('open', portOpen);     // callback for the port opening
  serial.on('data', serialEvent);  // callback for when new data arrives
  serial.on('error', serialError); // callback for errors
  serial.on('close', portClose);   // callback for the port closing
 
  serial.list();                   // list the serial ports
}

function draw() {
  fill(circleColor);           // fill depends on the button
  background(0);               // black background
  walls[0].show();
  walls[1].show();
  ellipse(locH, locV, 50, 50); // draw the circle
}

// get the list of ports:
function printList(portList) {
  // make a select menu and position it:
  portSelector = createSelect();
  portSelector.position(10,10);
   
  // portList is an array of serial port names
  for (var i = 0; i < portList.length; i++) {
    // Display the list the console:
    // console.log(i + " " + portList[i]);
    // add item to the select menu:
    portSelector.option(portList[i]);
  }
  // set a handler for when a port is selected from the menu:
  portSelector.changed(openPort);
}

function openPort() {
  var thisPort = portSelector.value();
  if (thisPort != null) {
    serial.open(thisPort);
  }
}

function portOpen() {
  console.log('the serial port opened.');
  // send a byte to prompt the microcontroller to send:
    serial.write('y');
}

function serverConnected() {
  print('connected to server.');
}
 
function serialError(err) {
  print('Something went wrong with the serial port. ' + err);
}
 
function portClose() {
  print('The serial port closed.');
}

function serialEvent() {
  // read a string from the serial port
  // until you get carriage return and newline:
  var inString = serial.readStringUntil("\r\n");
  //check to see that there's actually a string there:
  if (inString.length > 0) {
    if (inString !== 'hello') { // if you get hello, ignore it
      var sensors = split(inString, ','); // split the string on the commas
      if (sensors.length > 2) { // if there are three elements
        
        speedX = map(sensors[0] - 520, -200, 200, -5, 5); // map the reading to the speed of the circle
        newLocH = locH + speedX;
        speedY = map(sensors[1] - 520, -200, 200, 5, -5); 
        newLocV = locV + speedY; 
        //see if the ball will touch any wall
        for (var i = 0; i < walls.length; i++){
          if ((newLocH > (walls[i].x - r) && newLocH < (walls[i].x + walls[i].a + r)) && (newLocV > (walls[i].y - r) && (newLocV < (walls[i].y + walls[i].b + r)))){
              ballHitsWall = true;
              }
        }
        //update the position only when the ball does not hit the wall
        if (ballHitsWall == false){
          locH = newLocH;
          locV = newLocV;
        }
        ballHitsWall = false;
        //update the location when the circle is on the canvas
        //if (newLocH > 25 && newLocH < 615){
        //  locH = newLocH; 
        //}
        //if (newLocV > 25 && newLocV < 455 ){
        //  locV = newLocV; 
        //}
      }
    }
    serial.write('x'); // send a byte requesting more serial data
  }
  
}

class wall{
  constructor(x, y, a, b){
    this.x = x;
    this.y = y;
    this.a = a;
    this.b = b;
  }
  show(){
    rect(this.x, this.y, this.a, this.b);
  }
}
